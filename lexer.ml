# 4 "lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string

  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      [
        "type", TYPE;
        "var", VAR;
        "array", ARRAY;
        "of", OF;
        "filled", FILLED;
        "by", BY;
        "if", IF;
        "then", THEN;
        "else", ELSE;
        "foreach", FOREACH;
        "in", IN;
        "do", DO;
        "print", PRINT;
        "size", SIZE;
        "int", TINT
      ];
    
    fun s -> try Hashtbl.find h s with Not_found -> IDENT s

  let string_buffer = Buffer.create 1024


# 36 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\231\255\078\000\233\255\002\000\003\000\
    \238\255\239\255\240\255\241\255\242\255\243\255\244\255\246\255\
    \031\000\249\255\250\255\251\255\252\255\088\000\254\255\047\000\
    \202\000\048\000\137\000\169\000\247\255\237\255\235\255\004\000\
    \251\255\252\255\112\000\255\255\253\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\023\000\255\255\021\000\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \026\000\255\255\255\255\255\255\255\255\002\000\255\255\007\000\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\026\000\026\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\022\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\016\000\003\000\000\000\000\000\000\000\035\000\000\000\
    \013\000\012\000\017\000\019\000\000\000\018\000\020\000\023\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\014\000\005\000\007\000\015\000\006\000\030\000\
    \029\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\011\000\028\000\010\000\026\000\026\000\
    \034\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\009\000\000\000\008\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\036\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\000\000\000\000\000\000\021\000\
    \027\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\024\000\000\000\000\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\031\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\016\000\000\000\023\000\025\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\034\000\026\000\255\255\255\255\255\255\255\255\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\027\000\255\255\255\255\255\255\021\000\
    \026\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\024\000\255\255\255\255\255\255\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\034\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\024\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\026\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\027\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_tokens lexbuf =
   __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 46 "lexer.mll"
                                  ( next_tokens lexbuf )
# 195 "lexer.ml"

  | 1 ->
# 47 "lexer.mll"
                                  ( new_line lexbuf; next_tokens lexbuf )
# 200 "lexer.ml"

  | 2 ->
let
# 48 "lexer.mll"
             id
# 206 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "lexer.mll"
                                  ( [id_or_kwd id] )
# 210 "lexer.ml"

  | 3 ->
# 49 "lexer.mll"
                                  ( [DOT] )
# 215 "lexer.ml"

  | 4 ->
# 50 "lexer.mll"
                                  ( [PLUS] )
# 220 "lexer.ml"

  | 5 ->
# 51 "lexer.mll"
                                  ( [MINUS] )
# 225 "lexer.ml"

  | 6 ->
# 52 "lexer.mll"
                                  ( [TIMES] )
# 230 "lexer.ml"

  | 7 ->
# 53 "lexer.mll"
                                  ( [DIV] )
# 235 "lexer.ml"

  | 8 ->
# 54 "lexer.mll"
                                  ( [BINOP Bnotequal] )
# 240 "lexer.ml"

  | 9 ->
# 55 "lexer.mll"
                                  ( [EQUAL] )
# 245 "lexer.ml"

  | 10 ->
# 56 "lexer.mll"
                                  ( [BINOP Bequal] )
# 250 "lexer.ml"

  | 11 ->
# 57 "lexer.mll"
                                  ( [COLON] )
# 255 "lexer.ml"

  | 12 ->
# 58 "lexer.mll"
                                  ( [LPARENT] )
# 260 "lexer.ml"

  | 13 ->
# 59 "lexer.mll"
                                  ( [RPARENT] )
# 265 "lexer.ml"

  | 14 ->
# 60 "lexer.mll"
                                ( [LBRACKET] )
# 270 "lexer.ml"

  | 15 ->
# 61 "lexer.mll"
                               ( [RBRACKET] )
# 275 "lexer.ml"

  | 16 ->
# 62 "lexer.mll"
                               ( [LKEY] )
# 280 "lexer.ml"

  | 17 ->
# 63 "lexer.mll"
                               ( [RKEY] )
# 285 "lexer.ml"

  | 18 ->
# 64 "lexer.mll"
                                  ( [BINOP Bsmallerequal] )
# 290 "lexer.ml"

  | 19 ->
# 65 "lexer.mll"
                               ( [BINOP Bsmaller] )
# 295 "lexer.ml"

  | 20 ->
# 66 "lexer.mll"
                                  ( [BINOP Bbiggerequal] )
# 300 "lexer.ml"

  | 21 ->
# 67 "lexer.mll"
                               ( [BINOP Bbigger] )
# 305 "lexer.ml"

  | 22 ->
# 68 "lexer.mll"
                                  ( [SEMICOLON] )
# 310 "lexer.ml"

  | 23 ->
let
# 69 "lexer.mll"
               s
# 316 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "lexer.mll"
                                  ( try [CONSTANT (Cint (int_of_string s))] with _ -> raise (Lexing_error ("constant too large: " ^ s)) )
# 320 "lexer.ml"

  | 24 ->
# 70 "lexer.mll"
                                  ( [CONSTANT (Cstring (string lexbuf))] )
# 325 "lexer.ml"

  | 25 ->
# 71 "lexer.mll"
                                  ( [EOF] )
# 330 "lexer.ml"

  | 26 ->
let
# 72 "lexer.mll"
         c
# 336 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 72 "lexer.mll"
                                  ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 340 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 31
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 77 "lexer.mll"
      ( let s = Buffer.contents string_buffer in
	Buffer.reset string_buffer;
	s )
# 354 "lexer.ml"

  | 1 ->
# 81 "lexer.mll"
      ( Buffer.add_char string_buffer '\n';
	string lexbuf )
# 360 "lexer.ml"

  | 2 ->
# 84 "lexer.mll"
      ( Buffer.add_char string_buffer '"';
	string lexbuf )
# 366 "lexer.ml"

  | 3 ->
let
# 86 "lexer.mll"
         c
# 372 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 87 "lexer.mll"
      ( Buffer.add_char string_buffer c;
	string lexbuf )
# 377 "lexer.ml"

  | 4 ->
# 90 "lexer.mll"
      ( raise (Lexing_error "unterminated string") )
# 382 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 92 "lexer.mll"
 

  let next_token =
    let tokens = Queue.create () in (* próximos tokens por retornar *)
    fun lb ->
      if Queue.is_empty tokens then begin
	let l = next_tokens lb in
	List.iter (fun t -> Queue.add t tokens) l
      end;
      Queue.pop tokens
      

# 402 "lexer.ml"
